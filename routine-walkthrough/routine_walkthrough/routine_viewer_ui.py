# Form implementation generated from reading ui file 'c:\Users\provj709\Documents\ResearchandDevelopment\Routine-Walkthrough\routine-walkthrough\routine_walkthrough\routine_viewer.ui'
#
# Created by: PyQt6 UI code generator 6.6.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
import sys

import json
from PyQt6.QtCore import QSize, Qt
from PyQt6.QtGui import QAction, QIcon
from PyQt6.QtWidgets import (
    QApplication,
    QCheckBox,
    QLabel,
    QMainWindow,
    QStatusBar,
    QToolBar,
)
from PyQt6 import QtCore, QtGui, QtWidgets

from PyQt6 import QtCore, QtGui, QtWidgets

from json_back_end import back_end_setup as bes

class Ui_RoutineViewer(QMainWindow):
    def __init__(self, f = 0):
        super().__init__()
        self.setObjectName("RoutineViewer")
        self.resize(400, 300)
        gridLayoutWidget = QtWidgets.QWidget(parent=self)
        gridLayoutWidget.setGeometry(QtCore.QRect(9, 9, 371, 271))
        gridLayoutWidget.setObjectName("gridLayoutWidget")
        gridLayout = QtWidgets.QGridLayout(gridLayoutWidget)
        gridLayout.setContentsMargins(0, 0, 0, 0)
        gridLayout.setObjectName("gridLayout")
        end_button = QtWidgets.QPushButton(parent=gridLayoutWidget)
        end_button.setObjectName("end_button")
        end_button.setText("End")
        end_button.clicked.connect(self.end)
        gridLayout.addWidget(end_button, 1, 1, 1, 1)
        next_button = QtWidgets.QPushButton(parent=gridLayoutWidget)
        next_button.setObjectName("next_button")
        next_button.setText("Next")
        next_button.clicked.connect(self.next)
        gridLayout.addWidget(next_button, 0, 1, 1, 1)
        self.name_label = QtWidgets.QTextEdit(parent=gridLayoutWidget)
        self.name_label.setObjectName("name_label")
        gridLayout.addWidget(self.name_label, 0, 0, 1, 1)
        self.description_label = QtWidgets.QTextEdit(parent=gridLayoutWidget)
        self.description_label.setObjectName("description_label")
        gridLayout.addWidget(self.description_label, 1, 0, 1, 1)
        self.count_end = 0
        self.count = 0
        self.backend = bes(f)
        self.routine = self.backend.routine
        self.key = self.backend.keyholder
        print("marker")
        print(self.routine)
        print(self.key)
        self.routine_original_length = len(self.key)
        self.next()

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("RoutineViewer", "RoutineViewer"))
        self.name_label.setText(_translate("RoutineViewer", "place holder for name of item in routine"))
        self.description_label.setText(_translate("RoutineViewer", "place holder for description of item in routine"))
    
    def next(self):#give routine and keyholder if possible. if not make them contained with self
        print("next")
        print(str(self.count))
        if self.count > 0:
            self.key[self.count-1] = self.name_label.toPlainText()
            self.routine[self.key[self.count-1]] = self.description_label.toPlainText()
        if self.count < len(self.key):
            # self.key[self.count-1] = self.name_label.toPlainText()
            # self.routine[self.key[self.count-1]] = self.description_label.toPlainText()
            self.name_label.setText(str(self.key[self.count]))
            self.description_label.setText(str(self.routine[self.key[self.count]]))
        else:
            self.key.append("N/A")
            self.routine[self.key[len(self.key) - 1]] = "Empty"
            self.name_label.setText(str(self.key[self.count]))
            self.description_label.setText(str(self.routine[self.key[self.count]]))
        self.count += 1
    
    def end(self):#make this initiate repair after destroying all instances of 'N/A'
        # print("End")
        # print(str(self.count_end))
        # self.key[self.count-1] = self.name_label.toPlainText()
        # self.routine[self.key[self.count-1]] = self.description_label.toPlainText()
        # print(self.key)
        # print(self.routine)
        self.key = self.clean_key()# destroy all instances of 'N/A'
        self.routine = self.clean_routine()
        # give both self.key and self.routine to json_back_end so it can write them onto the json
        print(self.key)
        print(self.routine)
    def clean_key(self):
        key = []
        for i in self.key:
            if i == 'N/A':
                pass# destroy all instances of 'N/A'
            else:
                key.append(i)
        return key
    def clean_routine(self):
        routine = {}
        for i in self.key:
            routine[i] = self.routine[i]
        return routine
        